<script src="/static/admin/js/pusher.min.js"></script>

<script>
    let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001,
        forceTLS: false,
        enabledTransports: ["ws", "wss"],
        disabledTransports: []
    });

    let publicChannel = pusher.subscribe("public-channel");
    let privateChannel = pusher.subscribe("private-channel-{{ .User.ID }}");

    privateChannel.bind("private-message", function(data) {
        attention.alert({
            html: data.message,
            icons: 'success'
        });
    });

    publicChannel.bind("app-starting", function(data) {
        const toggle = document.getElementById("monitoring-live")
        toggle.checked = true;
        successAlert(data.message);
    });

    publicChannel.bind("app-stopping", function(data){
        const toggle = document.getElementById("monitoring-live")
        toggle.checked = false;
        warningAlert(data.message);

        const scheduleTable = document.getElementById("schedule-table")
        if (!!scheduleTable) {
            scheduleTable.tBodies[0].innerHTML = "";
            const newRow = scheduleTable.tBodies[0].insertRow(-1);
            const newCell = newRow.insertCell(0);
            newCell.setAttribute("colspan", "5");
            newCell.innerHTML = "No scheduled checks!";
        }
    });

    publicChannel.bind("schedule-item-removed-event", function(data) {
        const row = document.getElementById("schedule-" + data.host_service_id);
        if (!!row) {
            row.parentNode.removeChild(row);

            // check to see if we need to add a "no scheduled checks row"
            const currentTable = document.getElementById("schedule-table");
            if (currentTable.rows.length === 1) {
                let newRow = currentTable.tBodies[0].insertRow(-1);
                let newCell = newRow.insertCell(0);
                newCell.setAttribute("colspan", "5");
                newCell.innerHTML = "No scheduled checks!";
            }
        }
    });

    publicChannel.bind("schedule-changed-event", function(data) {
        const scheduleTable = document.getElementById("schedule-table")
        if (!!scheduleTable) {
            // check to see if the table contains "Ne scheduled checks!"
            const tableContent = scheduleTable.innerHTML;
            if (tableContent.includes("No scheduled checks!")) {
                const rowCount = scheduleTable.rows.length;
                for (let i = rowCount - 1; i > 0; i--) {
                    scheduleTable.deleteRow(i);
                }
            }

            // delete existing row
            const row = document.getElementById("schedule-" + data.host_service_id);
            if (!!row) {
                row.parentNode.removeChild(row);
            }

            const newRow = scheduleTable.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "schedule-" + data.host_service_id);

            let newCell = newRow.insertCell(0);
            let newText = document.createTextNode(data.host);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(1);
            newText = document.createTextNode(data.service);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(2);
            newText = document.createTextNode(data.schedule);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(3);
            newText = document.createTextNode(data.last_run);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(4);
            if (data.next_run === undefined) {
                newText = document.createTextNode("Pending...");
            } else {
                newText = document.createTextNode(data.next_run);
            }
            newCell.appendChild(newText)
        }
    })

    publicChannel.bind("host-service-status-changed", function(data) {
        attention.toast({
            msg: data.message,
            icon: 'info',
            timer: 30000,
            showCloseButton: true,
        });

        deleteHostServiceRow(data.host_service_id);

        updateHostServiceRow(data);
    });

    publicChannel.bind("host-service-count-changed", function(data) {
        const counts = ["healthy_count", "warning_count", "problem_count", "pending_count"];
        for (const count of counts) {
            let countExists = !!document.getElementById("healthy_count");
            if (countExists) {
                document.getElementById(count).innerHTML = data[count];
            }
        }
    });

    function deleteHostServiceRow(hostServiceId) {
        const row = document.getElementById("host-service-" + hostServiceId);
        if (!!row) {
            row.parentNode.removeChild(row);

            // if this is the last row, add a no services row
            const tables = ["healthy", "pending", "warning", "problem"];
            tables.forEach(table => {
                const currentTableExists = !!document.getElementById(table + "-table");
                if (currentTableExists) {
                    const currentTable = document.getElementById(table + "-table");

                    if (currentTable.rows.length === 1) {
                        // add in a "No services" row with colspan of 3
                        const newRow = currentTable.tBodies[0].insertRow(-1);
                        const newCell = newRow.insertCell(0);
                        newCell.setAttribute("colspan", "3");
                        newCell.innerHTML = "No services";
                    }
                }
            });
        }
    }

    function updateHostServiceRow(data) {
        const tableExists = !!document.getElementById(data.status + "-table");
        if (tableExists) {
            const tableRef = document.getElementById(data.status + "-table");

            // check the table we are inserting into to see if "No services" message exists
            const tableContent = tableRef.innerHTML;
            if (tableContent.includes("No services")) {
                const rowCount = tableRef.rows.length;
                for (let i = rowCount - 1; i > 0; i--) {
                    tableRef.deleteRow(i);
                }
            }

            const newRow = tableRef.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "host-service-" + data.host_service_id);

            // insert first td
            let newCell = newRow.insertCell(0);
            newCell.innerHTML = `
                <span class="${data.icon} mx-1"></span>
                ${data.service_name}
                <span onclick="checkNow(${data.host_service_id}, '${data.status}')" class="badge bg-secondary mx-1" role="button">
                    Check Now
                </span>
            `;

            // insert second td
            newCell =  newRow.insertCell(1);
            if (data.status !== "pending") {
                newCell.innerHTML = `${data.last_check}`;
            } else {
                newCell.innerHTML = "Pending..."
            }
            // insert third td
            newRow.insertCell(2);
            // newCell = newRow.insertCell(2);
        }
    }


    // things we want to look for 
    // - service goes down
    // - service comes up
    // - service status changed
    // - schedule changed
    // - monitoring is turned off
    // - next-run-event changes

    let attention = Prompt();

    {{if .Flash != ""}}
        successAlert('{{.Flash}}')
    {{end}}

    {{if .Warning != ""}}
        warningAlert('{{.Warning}}')
    {{end}}

    {{if .Error != ""}}
        errorAlert('{{.Error}}')
    {{end}}

    document.addEventListener("DOMContentLoaded", function () {
        let tabMap = new Map();
        let tabs = document.querySelectorAll('[data-toggle="tab"]');
        let i = 0;
        Array.prototype.filter.call(tabs, function (el) {
            el.addEventListener("click", function () {
                history.pushState("", document.title, window.location.pathname);
                localStorage.setItem('activeTab', el.getAttribute("data-target"));
            })

            tabMap.set(el.getAttribute("href"), i);
            i++;
        });

        if (!window.location.hash) {
            let activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
            }
        } else {
            if (tabMap.has(window.location.hash)) {
                document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(window.location.hash)].Tab.show()
            }
        }


        document.getElementById("monitoring-live").addEventListener("change", function(){
            let enabled = document.getElementById("monitoring-live").checked;
            if (!enabled) {
                attention.confirm({
                    html: "This will stop monitoring of all hosts and services. Are you sure?",
                    callback: function(result) {
                        if (result) {
                            // want to turn monitoring off
                            updateSystemPref("monitoring_live", "0");
                            toggleMonitoring(0);
                        } else {
                            document.getElementById("monitoring-live").checked = true;
                        }
                    }
                })
            } else {
                updateSystemPref("monitoring_live", "1");
                toggleMonitoring(1);
            }
        })
    });

    function updateSystemPref(prefName, prefValue) {
        let formData = new FormData();
        formData.append("pref_name", prefName);
        formData.append("pref_value", prefValue);
        formData.append("csrf_token", "{{.CSRFToken}}");
        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/set-system-pref");
        ajax.send(formData);
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }

    function toggleMonitoring(enabled) {
        let formData = new FormData();
        formData.append("enabled", enabled);
        formData.append("csrf_token", "{{.CSRFToken}}");
        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/toggle-monitoring");
        ajax.send(formData);
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }
</script>
